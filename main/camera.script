--local FLOATING = 10
local DISTANCE = 200

function init(self)
	msg.post("#camera", "acquire_camera_focus")
	--msg.post(".", "acquire_input_focus")

	self.pos = go.get_world_position()
	self.pos.z = DISTANCE
	self.rotation = 0
end

function update(self, dt)
	--msg.post("@render:", "draw_line", { start_point, end_point, color })
	--msg.post("@render:", "draw_text", { text, position })

	go.set_position(self.pos)
	go.set_rotation(vmath.quat_rotation_z(self.rotation))
end

function update_slope(self, val)
	self.rotation = val / 2000
end

function on_message(self, message_id, message, sender)
	if message_id == hash("slope") then
		update_slope(self, message.val)
	end
end

function on_input(self, action_id, action)
	--[[
	if action_id == hash("left") and action.repeated then
		self.pos.x = self.pos.x - 5
	elseif action_id == hash("right") and action.repeated then
		self.pos.x = self.pos.x + 5
	elseif action_id == hash("up") and action.pressed then
		self.pos.y = self.pos.y + 5
	elseif action_id == hash("down") and action.pressed then
		self.pos.y = self.pos.y - 5
	elseif action_id == hash("scale_up") and action.pressed then
		--msg.post("@render:", "change_scale", {delta = 0.1})
		self.pos.z = self.pos.z + 10
	elseif action_id == hash("scale_down") and action.pressed then
		--msg.post("@render:", "change_scale", {delta = -0.1})
		self.pos.z = self.pos.z - 10
	elseif action_id == hash("turn_left") and action.pressed then
		self.rotation = self.rotation + 0.05
	elseif action_id == hash("turn_right") and action.pressed then
		self.rotation = self.rotation - 0.05
	elseif action_id == hash("dothing") then
		if action.pressed then
			msg.post("@render:", "clear_color", {color = vmath.vector4(0.3, 0.4, 0.5, 0)})
		elseif action.released then
			msg.post("@render:", "clear_color", {color = vmath.vector4(0, 0, 0, 0)})
		end
	end
	]]--
end
