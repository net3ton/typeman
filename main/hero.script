local GRAVITY = -10
local JUMP_SPEED_Y = 160
local JUMP_SPEED_X = 50
local RUN_SPEED = 20

go.property("direction", -1)
go.property("stopped", false)

function init(self)
	self.velocity = vmath.vector3()
	self.pos = go.get_position()
	self.posLast = go.get_position()
	self.grounded = true
	self.curAnim = ""

	self.correction = vmath.vector3()
	sync_sprite_direction(self)
end

function update(self, dt)
	self.posLast = self.pos
	self.pos = self.pos + self.correction
	self.correction = vmath.vector3()
	go.set_position(self.pos)

	if not self.grounded then
		self.velocity = self.velocity + vmath.vector3(0, GRAVITY, 0)
		self.velocity.x = JUMP_SPEED_X * self.direction
	elseif not self.stopped then
		self.velocity.x = RUN_SPEED * self.direction
	end

	self.pos = self.pos + self.velocity * dt

	update_animation(self)
	self.grounded = false

	msg.post("main:/camera#script", "slope", { val = go.get_position().x })
end

function run(self)
	msg.post("#jump", "play_sound")
	self.stopped = false
end

function jump(self)
	if self.grounded then
		self.velocity.y = JUMP_SPEED_Y
		msg.post("#jump", "play_sound")
	end
end

function turn(self)
	if self.grounded then
		self.direction = -self.direction
		sync_sprite_direction(self)
		msg.post("#jump", "play_sound")
	end
end

function sync_sprite_direction(self)
	sprite.set_hflip("#sprite", self.direction > 0)
end

function update_animation(self)
	if self.grounded then
		if math.abs(self.pos.x - self.posLast.x) < 0.001 then
			set_animation(self, "idle")
		else
			set_animation(self, "run")
		end
	else
		set_animation(self, "jump")
	end
end

function set_animation(self, anim_str)
	if not (self.curAnim == anim_str) then
		self.curAnim = anim_str
		msg.post("#sprite", "play_animation", { id = hash(anim_str) })

		if anim_str == "jump" then
			msg.post("main:/camera#script", "jump", { start = true })
		else
			msg.post("main:/camera#script", "jump", { start = false })
		end
	end
end

function handle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = distance * (1 - proj) * normal
			self.correction = self.correction + comp
		end
	end

	--msg.post("@render:", "draw_line", {start_point = go.get_position(), end_point = go.get_position() + normal * 20, color = vmath.vector4(1, 1, 0, 0)})

	if normal.y > 0.7 then
		self.grounded = true
	end

	local toground = vmath.dot(self.velocity, normal)
	if toground < 0 then
		self.velocity = self.velocity - toground * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("ground") then
			handle_contact(self, message.normal, message.distance)
		end
	elseif message_id == hash("run") then
		run(self)
	elseif message_id == hash("jump") then
		jump(self)
	elseif message_id == hash("turn") then
		turn(self)
	elseif message_id == hash("exit_level") then
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5)
	end
end
